name: Release Python Package

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., 0.2.0)"
        required: true
        type: string

defaults:
  run:
    working-directory: mcp-server-galaxy-py

jobs:
  tag-version:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com

      - name: Update version in pyproject.toml
        working-directory: mcp-server-galaxy-py
        run: |
          sed -i 's/version = "[^"]*"/version = "${{ inputs.version }}"/' pyproject.toml
          git add pyproject.toml
          git commit -m "Bump version to ${{ inputs.version }}"
          git push

      - name: Create tag
        run: |
          git tag -a v${{ inputs.version }} -m "Release v${{ inputs.version }}"
          git push origin v${{ inputs.version }}

  deploy:
    runs-on: ubuntu-latest
    needs: tag-version
    if: always() && (needs.tag-version.result == 'success' || github.event_name == 'release')

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install uv
        uses: astral-sh/setup-uv@v1

      - name: Create virtual environment
        run: |
          uv venv
          echo "VIRTUAL_ENV=.venv" >> $GITHUB_ENV
          echo ".venv/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          uv pip install build twine

      - name: Build package
        run: uv run python -m build

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          uv run twine upload dist/*
